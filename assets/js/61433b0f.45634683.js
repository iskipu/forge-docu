"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7366],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>f});var i=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(t),d=o,f=g["".concat(s,".").concat(d)]||g[d]||u[d]||r;return t?i.createElement(f,a(a({ref:n},c),{},{components:t})):i.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<r;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=t(8168),o=(t(6540),t(5680));const r={description:"Transform and bundle code for your Electron Forge app with Vite."},a="Vite Plugin",l={unversionedId:"config/plugins/vite",id:"version-old/config/plugins/vite",title:"Vite Plugin",description:"Transform and bundle code for your Electron Forge app with Vite.",source:"@site/versioned_docs/version-old/config/plugins/vite.md",sourceDirName:"config/plugins",slug:"/config/plugins/vite",permalink:"/forge-docu/config/plugins/vite",draft:!1,editUrl:"https://github.com/iskipu/forge-docu/edit/main/versioned_docs/version-old/config/plugins/vite.md",tags:[],version:"old",frontMatter:{description:"Transform and bundle code for your Electron Forge app with Vite."},sidebar:"tutorialSidebar",previous:{title:"Webpack Plugin",permalink:"/forge-docu/config/plugins/webpack"},next:{title:"Electronegativity Plugin",permalink:"/forge-docu/config/plugins/electronegativity"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Plugin configuration",id:"plugin-configuration",level:3},{value:"Project files",id:"project-files",level:3},{value:"Advanced configuration",id:"advanced-configuration",level:2},{value:"Native Node modules",id:"native-node-modules",level:3},{value:"Hot Module Replacement (HMR)",id:"hot-module-replacement-hmr",level:3}],c={toc:p},g="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(g,(0,i.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"vite-plugin"},"Vite Plugin"),(0,o.yg)("p",null,"This plugin makes it easy to set up standard Vite tooling to compile both your main process code and your renderer process code."),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev @electron-forge/plugin-vite\n")),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)("h3",{id:"plugin-configuration"},"Plugin configuration"),(0,o.yg)("p",null,"You must provide two Vite configuration files: one for the main process in ",(0,o.yg)("inlineCode",{parentName:"p"},"vite.main.config.js"),", and one for the renderer process in ",(0,o.yg)("inlineCode",{parentName:"p"},"vite.renderer.config.js"),"."),(0,o.yg)("p",null,"For example, this is the ",(0,o.yg)("a",{parentName:"p",href:"/forge-docu/config/configuration"},"configuration")," taken from Forge's ",(0,o.yg)("a",{parentName:"p",href:"/forge-docu/templates/vite"},"Vite template"),":"),(0,o.yg)("p",null,'{% tabs %}\n{% tab title="forge.config.js" %}'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"module.exports = {\n  plugins: [\n    {\n      name: '@electron-forge/plugin-vite',\n      config: {\n        // `build` can specify multiple entry builds, which can be\n        // Main process, Preload scripts, Worker process, etc.\n        build: [\n          {\n            // `entry` is an alias for `build.lib.entry`\n            // in the corresponding file of `config`.\n            entry: 'src/main.js',\n            config: 'vite.main.config.mjs'\n          },\n          {\n            entry: 'src/preload.js',\n            config: 'vite.preload.config.mjs'\n          }\n        ],\n        renderer: [\n          {\n            name: 'main_window',\n            config: 'vite.renderer.config.mjs'\n          }\n        ]\n      }\n    }\n  ]\n};\n")),(0,o.yg)("p",null,"{% endtab %}"),(0,o.yg)("p",null,'{% tab title="package.json" %}'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // ...\n  "config": {\n    "forge": {\n      "plugins": [\n        {\n          "name": "@electron-forge/plugin-vite",\n          "config": {\n            "build": [\n              {\n                "entry": "src/main.js",\n                "config": "vite.main.config.mjs",\n              },\n              {\n                "entry": "src/preload.js",\n                "config": "vite.preload.config.mjs",\n              },\n            ],\n            "renderer": [\n              {\n                "name": "main_window",\n                "config": "vite.renderer.config.mjs",\n              }]\n            }\n          }\n        }\n      ]\n    }\n  }\n  // ...\n}\n')),(0,o.yg)("p",null,"{% endtab %}\n{% endtabs %}"),(0,o.yg)("p",null,"Config options will largely follow the same standards as non-Electron Vite projects. You can reference ",(0,o.yg)("a",{parentName:"p",href:"https://vitejs.dev/config/"},"Vite's documentation here")," for more examples of how to configure each of your entry point's config files."),(0,o.yg)("h3",{id:"project-files"},"Project files"),(0,o.yg)("p",null,"Vite's build config generates a separate entry for the main process and preload script, as well as each renderer process."),(0,o.yg)("p",null,"Your ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," entry in your ",(0,o.yg)("inlineCode",{parentName:"p"},"package.json")," file needs to point at ",(0,o.yg)("inlineCode",{parentName:"p"},'".vite/build/main"'),", like so:"),(0,o.yg)("p",null,'{% code title="package.json" %}'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "name": "my-vite-app",\n  "main": ".vite/build/main.js",\n  // ...\n}\n')),(0,o.yg)("p",null,"{% endcode %}"),(0,o.yg)("p",null,"If using the Vite template, this should be automatically set up for you."),(0,o.yg)("h2",{id:"advanced-configuration"},"Advanced configuration"),(0,o.yg)("h3",{id:"native-node-modules"},"Native Node modules"),(0,o.yg)("p",null,"If you used the ",(0,o.yg)("a",{parentName:"p",href:"/forge-docu/templates/vite"},"Vite")," template to create your application, native modules will mostly work out of the box. However, to avoid possible build issues, we recommend instructing Vite to load them as external packages:"),(0,o.yg)("p",null,'{% code title="vite.main.config.js" %}'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"import { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      external: [\n        'serialport',\n        'sqlite3'\n      ]\n    }\n  }\n});\n")),(0,o.yg)("p",null,"{% endcode %}"),(0,o.yg)("h3",{id:"hot-module-replacement-hmr"},"Hot Module Replacement (HMR)"),(0,o.yg)("p",null,"In order to use Vite's ",(0,o.yg)("a",{parentName:"p",href:"https://vitejs.dev/guide/features.html#hot-module-replacement"},"Hot Module Replacement (HMR)"),", all ",(0,o.yg)("inlineCode",{parentName:"p"},"loadURL")," paths need to reference the global variables that the Vite plugin will define for you:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"The dev server will be suffixed with ",(0,o.yg)("inlineCode",{parentName:"li"},"_DEV_SERVER_URL")),(0,o.yg)("li",{parentName:"ul"},"The static file path will be suffixed with ",(0,o.yg)("inlineCode",{parentName:"li"},"_VITE_NAME"))),(0,o.yg)("p",null,"In the case of the ",(0,o.yg)("inlineCode",{parentName:"p"},"main_window"),", the global variables will be named ",(0,o.yg)("inlineCode",{parentName:"p"},"MAIN_WINDOW_VITE_DEV_SERVER_URL")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"MAIN_WINDOW_VITE_NAME"),". An example of how to use them is given below:"),(0,o.yg)("p",null,'{% code title="main.js" %}'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"const mainWindow = new BrowserWindow({ /* ... */ });\n\nif (MAIN_WINDOW_VITE_DEV_SERVER_URL) {\n  mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);\n} else {\n  mainWindow.loadFile(path.join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`));\n};\n")),(0,o.yg)("p",null,"{% endcode %}"),(0,o.yg)("p",null,'{% hint style="info" %}\nIf using TypeScript, the variables can be defined as such:'),(0,o.yg)("pre",{class:"language-typescript","data-title":"main.js (Main Process)"},(0,o.yg)("code",{class:"lang-typescript"},(0,o.yg)("strong",null,"declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;"),"declare const MAIN_WINDOW_VITE_NAME: string;")),(0,o.yg)("p",null,"{% endhint %}"))}u.isMDXComponent=!0}}]);